{"ast":null,"code":"//import { auth } from 'firebase';\nimport { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    // const {user} = yield auth.signInWithPopup(googleProvider);\n    //console.log(userRef);\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      userAuth\n    } = yield auth.createUserWithEmailAndPassword(email, password); // yield getSnapshotFromUserAuth (user);\n\n    yield put(signUpSuccess({\n      userAuth,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n;\nexport function* signInAfterSignUp({\n  payload: {\n    userAuth,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(userAuth, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      userAuth\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess) //  call(signInAfterSignUp)\n  ]);\n}","map":{"version":3,"sources":["C:/Users/naeem/Desktop/css/react js/crown-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signOut","signUp","payload","email","password","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["//import { auth } from 'firebase';\r\nimport {takeLatest, put , call ,all} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { auth, \r\n    googleProvider,\r\n     createUserProfileDocument,\r\n     getCurrentUser} from '../../firebase/firebase.utils';\r\n\r\n     import { SignInSuccess , SignInFailure , signOutFailure ,signOutSuccess , signUpFailure,signUpSuccess} from './user.actions';\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth , additionalData) {\r\n    try {\r\n       // const {user} = yield auth.signInWithPopup(googleProvider);\r\n        //console.log(userRef);\r\n        const userRef = yield call (createUserProfileDocument , userAuth , additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put (\r\n            SignInSuccess({ id: userSnapshot.id,  ...userSnapshot.data()})\r\n        );\r\n    }catch(error) {\r\n        yield put (SignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        \r\n        yield getSnapshotFromUserAuth (user);\r\n       \r\n    }catch(error) {\r\n        yield put (SignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* signOut () {\r\n    try {\r\n        yield auth.signOut();\r\n        yield(put(signOutSuccess()));\r\n    } catch (error) {\r\n        yield (put(signOutFailure(error)));\r\n        \r\n    }\r\n}\r\n\r\nexport function* signUp ({ payload: { email , password , displayName }}) {\r\n    try {\r\n        const {userAuth} = yield auth.createUserWithEmailAndPassword(\r\n            email ,\r\n            password\r\n             );\r\n            // yield getSnapshotFromUserAuth (user);\r\n        yield put(signUpSuccess({ userAuth, additionalData: {displayName}}));     \r\n\r\n    } catch (error) {\r\n        yield put (signUpFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signInAfterSignUp ({payload:{ userAuth , additionalData}}) {\r\n   yield getSnapshotFromUserAuth(userAuth , additionalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email , password}}) {\r\n    try {\r\n        const {userAuth} = yield auth.signInWithEmailAndPassword(email , password);\r\n        yield  getSnapshotFromUserAuth (userAuth);\r\n    \r\n    }catch(error) {\r\n        yield put (SignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n       const userAuth = yield getCurrentUser();\r\n       if (!userAuth) return;\r\n       yield getSnapshotFromUserAuth (userAuth);\r\n    \r\n    }catch(error) {\r\n        yield put (SignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START , signOut )\r\n}\r\n\r\nexport function* onSignUpStart () {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START , signUp)\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS , signInAfterSignUp)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), \r\n        call(onEmailSignInStart) , \r\n        call(onCheckUserSession) ,\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess),\r\n      //  call(signInAfterSignUp)\r\n    \r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}