{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naeem\\\\Desktop\\\\css\\\\react js\\\\crown-clothing\\\\client\\\\src\\\\Pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect, lazy, Suspense } from 'react';\nimport { Route } from 'react-router-dom'; //import {createStructuredSelector} from 'reselect';\n\nimport { connect } from 'react-redux'; //import CollectionOverviewContainer from '../../Components/collection-overview/collections-overview.container';\n//import CollectionPageContainer from '../collection/collection.container';\n//import {firestore , convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.action'; // import { selectIsCollectionsLaoded} from '../../redux/shop/shop.selector';\n//import WithSpinner from '../../Components/with-spinner/with-spinner.component'\n//const CollectionOverviewWithSpinner = WithSpinner (CollectionOverview);\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nimport Spinner from '../../Components/spinner/spinner.component';\nconst CollectionOverviewContainer = lazy(() => import('../../Components/collection-overview/collections-overview.container'));\nconst CollectionPageContainer = lazy(() => import('../collection/collection.container'));\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  // constructor () {\n  //     super();\n  //     this.state= {\n  //         loading : true\n  //     }\n  // }\n  // unsubscribeFromSnapshot = null;\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]); // componentDidMount() {\n  //     const {fetchCollectionsStart} = this.props;\n  //     fetchCollectionsStart();\n  // const {updateCollections} =this.props;\n  // const collectionRef = firestore.collection('collections');\n  // fetch(\n  //     'https://firestore.googleapis.com/v1/projects/crown-db-bef58/databases/(default)/documents/collections'\n  //     )\n  //     .then(response => response.json())\n  //     .then(collections => console.log(collections));\n  // collectionRef.get().then(\n  //     snapShot => {\n  //         const collectionsMap =   convertCollectionsSnapshotToMap(snapShot);\n  //         updateCollections(collectionsMap);\n  //         this.setState({loading :false});\n  //         //console.log(collectionsMap);\n  //        }\n  // )\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 32\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}` //  \n    ,\n    component: CollectionOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId` //  render = { props => (\n    // <CollectionPageWithSpinner isLoading ={!isCollectionsLoaded} {...props} /> \n    // )} \n    ,\n    component: CollectionPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n}; // const {match } = this.props;\n// const {loading} = this.state;\n//console.log(match);\n// const mapStateToProps = createStructuredSelector ({\n//     //isCollectionFetching : selectIsCollectionFetching,\n//     isCollectionsLoaded : selectIsCollectionsLaoded\n// })\n\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections : collectionsMap =>\n  // dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/naeem/Desktop/css/react js/crown-clothing/client/src/Pages/shop/shop.component.jsx"],"names":["React","useEffect","lazy","Suspense","Route","connect","fetchCollectionsStart","Spinner","CollectionOverviewContainer","CollectionPageContainer","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,QAAjC,QAA+C,OAA/C;AACA,SAAQC,KAAR,QAAoB,kBAApB,C,CACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AACA;AACA;;AACA,SAAUC,qBAAV,QAAuC,8BAAvC,C,CACA;AACA;AAEA;AACA;;AAEA,OAAOC,OAAP,MAAoB,4CAApB;AAEA,MAAMC,2BAA2B,GAAGN,IAAI,CAAE,MAC1C,OAAQ,qEAAR,CADwC,CAAxC;AAGA,MAAMO,uBAAuB,GAAGP,IAAI,CAAE,MACtC,OAAO,oCAAP,CADoC,CAApC;;AAGA,MAAMQ,QAAQ,GAAG,CAAC;AAACJ,EAAAA,qBAAD;AAAwBK,EAAAA;AAAxB,CAAD,KAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,qBAAqB;AACxB,GAFQ,EAEP,CAACA,qBAAD,CAFO,CAAT,CATkD,CAYlD;AAEA;AACA;AAGI;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL,oBAAC,QAAD;AAAU,IAAA,QAAQ,eAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AACC,IAAA,IAAI,EAAK,GAAEK,KAAK,CAACC,IAAK,EADvB,CAEA;AAFA;AAGA,IAAA,SAAS,EAAEJ,2BAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,eAMF,oBAAC,KAAD;AACC,IAAA,IAAI,EAAK,GAAEG,KAAK,CAACC,IAAK,gBADvB,CAEA;AACA;AACA;AAJA;AAKA,IAAA,SAAS,EAAEH,uBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANE,CADK,CAAP;AAkBH,CAzDL,C,CA4DE;AACA;AAEM;AAIR;AACA;AACA;AAEA;;;AAEA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACA;AAEAR,EAAAA,qBAAqB,EAAE,MAAMQ,QAAQ,CAACR,qBAAqB,EAAtB;AAJD,CAAL,CAAnC;;AAOA,eAAeD,OAAO,CAAC,IAAD,EAAMQ,kBAAN,CAAP,CACVH,QADU,CAAf","sourcesContent":["import React , {useEffect, lazy ,Suspense}from 'react';\r\nimport {Route} from 'react-router-dom';\r\n//import {createStructuredSelector} from 'reselect';\r\nimport {connect} from 'react-redux';\r\n\r\n//import CollectionOverviewContainer from '../../Components/collection-overview/collections-overview.container';\r\n//import CollectionPageContainer from '../collection/collection.container';\r\n//import {firestore , convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {  fetchCollectionsStart } from '../../redux/shop/shop.action';\r\n// import { selectIsCollectionsLaoded} from '../../redux/shop/shop.selector';\r\n//import WithSpinner from '../../Components/with-spinner/with-spinner.component'\r\n\r\n//const CollectionOverviewWithSpinner = WithSpinner (CollectionOverview);\r\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nimport Spinner from '../../Components/spinner/spinner.component';\r\n\r\nconst CollectionOverviewContainer = lazy (() => \r\nimport ('../../Components/collection-overview/collections-overview.container'));\r\n\r\nconst CollectionPageContainer = lazy (() => \r\nimport('../collection/collection.container'));\r\n\r\nconst ShopPage = ({fetchCollectionsStart, match}) =>  {\r\n    // constructor () {\r\n    //     super();\r\n    //     this.state= {\r\n    //         loading : true\r\n    //     }\r\n    // }\r\n    // unsubscribeFromSnapshot = null;\r\n\r\n    useEffect(() => {\r\n        fetchCollectionsStart();\r\n    },[fetchCollectionsStart]);\r\n    // componentDidMount() {\r\n\r\n    //     const {fetchCollectionsStart} = this.props;\r\n    //     fetchCollectionsStart();\r\n\r\n\r\n        // const {updateCollections} =this.props;\r\n        // const collectionRef = firestore.collection('collections');\r\n\r\n        // fetch(\r\n        //     'https://firestore.googleapis.com/v1/projects/crown-db-bef58/databases/(default)/documents/collections'\r\n        //     )\r\n\r\n        //     .then(response => response.json())\r\n        //     .then(collections => console.log(collections));\r\n\r\n\r\n        // collectionRef.get().then(\r\n        //     snapShot => {\r\n\r\n        //         const collectionsMap =   convertCollectionsSnapshotToMap(snapShot);\r\n        //         updateCollections(collectionsMap);\r\n        //         this.setState({loading :false});\r\n        //         //console.log(collectionsMap);\r\n        //        }\r\n        // )\r\n\r\n        return(<div className = 'shop-page'> \r\n          <Suspense fallback= {<Spinner/>}>\r\n        <Route exact\r\n         path = {`${match.path}`} \r\n        //  \r\n        component={CollectionOverviewContainer} \r\n        />\r\n        <Route\r\n         path = {`${match.path}/:collectionId`}\r\n        //  render = { props => (\r\n        // <CollectionPageWithSpinner isLoading ={!isCollectionsLoaded} {...props} /> \r\n        // )} \r\n        component={CollectionPageContainer }\r\n\r\n        />\r\n            </Suspense>\r\n        </div>);\r\n            \r\n    }\r\n\r\n\r\n  // const {match } = this.props;\r\n  // const {loading} = this.state;\r\n\r\n        //console.log(match);\r\n\r\n\r\n\r\n// const mapStateToProps = createStructuredSelector ({\r\n//     //isCollectionFetching : selectIsCollectionFetching,\r\n//     isCollectionsLoaded : selectIsCollectionsLaoded\r\n\r\n// })\r\n \r\nconst mapDispatchToProps = dispatch => ({\r\n    // updateCollections : collectionsMap =>\r\n    // dispatch(updateCollections(collectionsMap))\r\n\r\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\r\n});\r\n\r\nexport default connect(null,mapDispatchToProps)\r\n    (ShopPage);"]},"metadata":{},"sourceType":"module"}